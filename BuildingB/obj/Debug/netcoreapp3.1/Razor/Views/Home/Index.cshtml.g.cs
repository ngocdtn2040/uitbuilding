#pragma checksum "/Users/mac/Downloads/GIS/SourceCode/BuildingB/BuildingB/Views/Home/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2c93de396159c9c764f82a0a7ee04ffb3f2e5613"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/mac/Downloads/GIS/SourceCode/BuildingB/BuildingB/Views/_ViewImports.cshtml"
using BuildingB;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/mac/Downloads/GIS/SourceCode/BuildingB/BuildingB/Views/_ViewImports.cshtml"
using BuildingB.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2c93de396159c9c764f82a0a7ee04ffb3f2e5613", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e0f17ea492a8db21e9008001f00140e87775fb28", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2c93de396159c9c764f82a0a7ee04ffb3f2e56133180", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"" />
    <meta name=""viewport""
          content=""initial-scale=1,maximum-scale=1,user-scalable=no"" />
    <title>GeoJSONLayer | Sample | ArcGIS API for JavaScript 4.16</title>

    <style>
        html,
        body,
        #viewDiv {
            padding: 0;
            margin: 0;
            height: 100%;
            width: 100%;
        }
    </style>

    <link rel=""stylesheet""
          href=""https://js.arcgis.com/4.16/esri/themes/light/main.css"" />
    <script src=""https://js.arcgis.com/4.16/""></script>

    <script>
        highlight = undefined;

        require([
            ""esri/Map"",
            ""esri/views/SceneView"",
            ""esri/layers/GeoJSONLayer"",
            ""esri/layers/SceneLayer"",
            ""esri/views/MapView""
        ], function (Map, SceneView, GeoJSONLayer, SceneLayer) {
            nen = new GeoJSONLayer({
                url: ""https://localhost:44327/nen""
            }),
                nentang = new GeoJSONLayer({");
                WriteLiteral(@"
                    url: ""https://localhost:44327/NenNha""
                }),
                nenham = new GeoJSONLayer({
                    url: ""data/Nenham.json""
                }),
                cotnha = new GeoJSONLayer({
                    url: ""data/cotnha.json""
                }),
                cotnha2 = new GeoJSONLayer({
                    url: ""data/cotnha2.json""
                }),
                cotnha3 = new GeoJSONLayer({
                    url: ""data/cotnha3.json""
                }),
                phonghoc = new GeoJSONLayer({
                    url: ""data/phonghoc.json""
                }),
                cuaso = new GeoJSONLayer({
                    url: ""data/cuaso.json""
                }),
                cuaso2 = new GeoJSONLayer({
                    url: ""data/cuaso2.json""
                }),
                cuaso3 = new GeoJSONLayer({
                    url: ""data/cuaso3.json""
                }),
                cuasonho = new GeoJSONLayer({
  ");
                WriteLiteral(@"                  url: ""data/cuasonho.json""
                }),
                cuasovua = new GeoJSONLayer({
                    url: ""data/cuasovua.json""
                }),
                cuasosau = new GeoJSONLayer({
                    url: ""data/cuasosau.json""
                }),
                bacthang = new GeoJSONLayer({
                    url: ""data/bacthang.json""
                }),
                bacthangnho = new GeoJSONLayer({
                    url: ""data/Bacthangnho.json""
                }),
                behoa = new GeoJSONLayer({
                    url: ""data/Behoa.json""
                }),
                cir = new GeoJSONLayer({
                    url: ""data/cir.json""
                }),
                lancan = new GeoJSONLayer({
                    url: ""data/lancan.json""
                }),
                nentang2 = new GeoJSONLayer({
                    url: ""data/nennha.json""
                }),
                nhaA = new GeoJSONLayer({
           ");
                WriteLiteral(@"         url: ""data/NhaA.json""
                }),
                nhaC = new GeoJSONLayer({
                    url: ""data/NhaC.json""
                }),
                nen = new GeoJSONLayer({
                    url: ""data/nen.json""
                }),
                nhaE = new GeoJSONLayer({
                    url: ""data/NhaE.json""
                }),
                nhaA.renderer = {
                    type: ""simple"",
                    symbol: {
                        type: ""polygon-3d"",
                        symbolLayers: [

                            {
                                type: ""extrude"",
                                size: 15,
                                material: {
                                    color: [255, 222, 173]
                                },
                                edges: {
                                    type: ""solid"", // autocasts as new SolidEdges3D()
                                    color: [50, 50, 50, 1]
       ");
                WriteLiteral(@"                         },

                            }
                        ]
                    }
                };
            nhaE.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 55,
                            material: {
                                color: [152, 245, 255]
                            },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            nhaC.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

             ");
                WriteLiteral(@"           {
                            type: ""extrude"",
                            size: 20,
                            material: {
                                color: [230, 230, 250]
                            },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            phonghoc.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 4,
                            material: {
                                color: [204, 255, 255]
                            },
                            edges: {
                                type: ""soft"", /");
                WriteLiteral(@"/ autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };

            cotnha.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 26.9,
                            material: {
                                color: [204, 255, 255]
                            },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };

            cotnha2.renderer = {
                type: ""simple"",
                symbol: {
    ");
                WriteLiteral(@"                type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 31.2,
                            material: {
                                color: [204, 255, 255]
                            },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            cotnha3.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 39.9,
                            material: {
                                color: [204, 255, 255]
                        ");
                WriteLiteral(@"    },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            nen.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [
                        {
                            type: ""extrude"",
                            size: 4,
                            material: {
                                color: [0, 124, 182]
                            },
                            edges: {
                                type: ""soft"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            }

                        }
                    ]
                }
            };
            cir.rend");
                WriteLiteral(@"erer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [
                        {
                            type: ""extrude"",
                            size: 2,
                            material: {
                                color: [181, 181, 181]
                            },
                            edges: {
                                type: ""soft"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            }

                        }
                    ]
                }
            };
            behoa.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [
                        {
                            type: ""extrude"",
                            size: 4,
                            material: {
                    ");
                WriteLiteral(@"            color: [130, 130, 130]
                            },
                            edges: {
                                type: ""soft"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            }

                        }
                    ]
                }
            };


            nentang2.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [
                        {
                            type: ""extrude"",
                            size: 0.6,
                            material: {
                                color: [0, 124, 182]
                            },
                            edges: {
                                type: ""soft"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            }

                        }
         ");
                WriteLiteral(@"           ]
                }
            };
            nenham.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [
                        {
                            type: ""extrude"",
                            size: 0.1,
                            material: {
                                color: [245, 245, 220]
                            },
                            edges: {
                                type: ""soft"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            }

                        }
                    ]
                }
            };
            cuaso.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                       ");
                WriteLiteral(@"     size: 40.8,
                            material: {
                                color: [152, 245, 255]
                            },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            cuaso2.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 26.9,
                            material: {
                                color: [152, 245, 255]
                            },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, ");
                WriteLiteral(@"50, 50, 1]
                            },

                        }
                    ]
                }
            };
            cuaso3.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 31.8,
                            material: {
                                color: [152, 245, 255]
                            },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            cuasonho.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

      ");
                WriteLiteral(@"                  {
                            type: ""extrude"",
                            size: 0.5,
                            material: {
                                color: [181, 181, 181]
                            },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            cuasovua.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 2.3,
                            material: {
                                color: [245, 245, 220]
                            },
                            edges: {
                                type:");
                WriteLiteral(@" ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            cuasosau.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 1.6,
                            material: {
                                color: [245, 245, 220]
                            },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            bacthang.renderer = {
                type: ""simple"",
                symbol");
                WriteLiteral(@": {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 0.5,
                            material: {
                                color: [181, 181, 181]
                            },
                            edges: {
                                type: ""soft"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            bacthangnho.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 0.5,
                            material: {
                                color: [130, 130, 130]
              ");
                WriteLiteral(@"              },
                            edges: {
                                type: ""soft"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };
            lancan.renderer = {
                type: ""simple"",
                symbol: {
                    type: ""polygon-3d"",
                    symbolLayers: [

                        {
                            type: ""extrude"",
                            size: 0.1,
                            material: {
                                color: [0, 124, 182]
                            },
                            edges: {
                                type: ""solid"", // autocasts as new SolidEdges3D()
                                color: [50, 50, 50, 1]
                            },

                        }
                    ]
                }
            };

");
                WriteLiteral(@"            const map = new Map({
                basemap: ""topo-vector"",
                ground: ""world-elevation"",
                layers: [nhaC, nhaE, nhaA, phonghoc, lancan, cir, nenham, behoa, bacthangnho, cuaso, cuasosau, cuaso2, cuaso3, cuasonho, cuasovua, nen, nentang2, cotnha, cotnha2, cotnha3, bacthang] //end layers
            });

            const view = new SceneView({
                container: ""viewDiv"",
                map: map,

                camera: {
                    position: [106.79896133488565, 10.84746232116585, 2073.31548],
                    heading: 0,
                    tilt: 75
                }
            });

            view.popup.defaultPopupTemplateEnabled = true;
        });

    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2c93de396159c9c764f82a0a7ee04ffb3f2e561324202", async() => {
                WriteLiteral("\r\n    <div id=\"viewDiv\"></div>\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
